package uz.gita.newsapp_practice.presenter.screens.introimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.Fontimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport cafe.adriel.voyager.androidx.AndroidScreenimport cafe.adriel.voyager.hilt.getViewModelimport uz.gita.newsapp_practice.Rclass IntroScreen : AndroidScreen() {    @Composable    override fun Content() {        val viewModel: IntroContract.ViewModel = getViewModel<IntroViewModel>()        IntroScreenContent(viewModel::onEventDispatcher)    }}@Composablefun IntroScreenContent(    onEventDispatcher: (IntroContract.Intent) -> Unit = {},) {    Box(modifier = Modifier.fillMaxSize()) {        Image(            painter = painterResource(id = R.drawable.sky), contentDescription = "",            contentScale = ContentScale.Crop,            modifier = Modifier.fillMaxSize()        )        Image(            painter = painterResource(id = R.drawable.building),            contentDescription = "",            modifier = Modifier                .width(430.dp)                .height(500.dp)        )        Box(            modifier = Modifier                .fillMaxWidth()                .height(421.dp)                .align(Alignment.BottomCenter)                .clip(RoundedCornerShape(topStart = 20.dp, topEnd = 20.dp))                .background(Color.White)        ) {            Column {                Text(                    text = "Get The Latest News And Updates",                    style = TextStyle(                        color = Color.Black,                        fontSize = 28.sp,                        textAlign = TextAlign.Center,                        fontFamily = FontFamily(Font(R.font.inter_semi_bold)),                    ),                    modifier = Modifier                        .padding(start = 20.dp, end = 20.dp, top = 20.dp)                        .align(Alignment.CenterHorizontally)                )                Text(                    text = "From Politics to Entertainment: Your One-Stop Source for Comprehensive Coverage of the Latest News and Developments Across the Glob will be right on your hand.",                    style = TextStyle(                        color = Color(0xFF6D6265),                        fontSize = 16.sp,                        textAlign = TextAlign.Center,                        fontFamily = FontFamily(Font(R.font.inter_regular)),                    ),                    modifier = Modifier                        .padding(horizontal = 20.dp)                        .align(Alignment.CenterHorizontally)                        .padding(top = 15.dp)                )                Row(                    modifier = Modifier                        .align(Alignment.CenterHorizontally)                        .padding(top = 30.dp)                ) {                    Button(                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF2D5BD0)),                        onClick = { onEventDispatcher.invoke(IntroContract.Intent.MoveToMain) }) {                        Row(                            modifier = Modifier                                .width(145.dp)                                .height(45.dp)                        ) {                            Spacer(modifier = Modifier.weight(1f))                            Text(                                text = "Explore",                                style = TextStyle(                                    color = Color.White,                                    fontSize = 20.sp,                                    fontFamily = FontFamily(Font(R.font.inter_semi_bold))                                ),                                modifier = Modifier.align(Alignment.CenterVertically)                            )                            Image(                                painter = painterResource(id = R.drawable.ic_arrow_forward),                                contentDescription = "",                                modifier = Modifier.align(Alignment.CenterVertically)                            )                            Spacer(modifier = Modifier.weight(1f))                        }                    }                }            }        }    }}@Composable@Preview(showBackground = true)fun IntroScreenPreview() {    IntroScreenContent()}