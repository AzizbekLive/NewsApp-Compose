package uz.gita.newsapp_practice.presenter.screens.mainimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.flow.updateimport kotlinx.coroutines.launchimport uz.gita.newsapp_practice.domain.usecase.CategoriesUseCaseimport uz.gita.newsapp_practice.domain.usecase.SliderNewsUseCaseimport javax.inject.Inject@HiltViewModelclass MainViewModel @Inject constructor(    private val useCase: SliderNewsUseCase,    private val useCaseCategory: CategoriesUseCase,    private val mainDirection: MainDirection,) : MainContract.ViewModel, ViewModel() {    override val uiState = MutableStateFlow(MainContract.UIState())    override fun onEventDispatcher(intent: MainContract.Intent) {        when (intent) {            is MainContract.Intent.SliderDetail -> {                viewModelScope.launch {                    mainDirection.openSliderDetailScreen(intent.sliderParam)                }            }            is MainContract.Intent.SelectCategory -> {                viewModelScope.launch(Dispatchers.IO) {                    useCaseCategory.invoke(category = intent.category).onEach {                        uiState.update { uiState ->                            uiState.copy(newsList = it, selectedCategory = intent.category)                        }                    }.collect()                }            }            is MainContract.Intent.NewsDetail -> {                viewModelScope.launch {                    mainDirection.openNewsDetailScreen(intent.categoryParam)                }            }        }    }    init {        viewModelScope.launch(Dispatchers.IO) {            useCase.invoke().onEach {                uiState.update { uiState ->                    uiState.copy(sliderNews = it)                }            }.collect()        }        viewModelScope.launch(Dispatchers.IO) {            useCaseCategory.invoke(category = uiState.value.selectedCategory).onEach {                uiState.update { uiState ->                    uiState.copy(newsList = it)                }            }.collect()        }    }}