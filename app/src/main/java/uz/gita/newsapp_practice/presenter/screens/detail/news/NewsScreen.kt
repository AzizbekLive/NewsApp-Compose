package uz.gita.newsapp_practice.presenter.screens.detail.newsimport android.content.Intentimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxHeightimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.Cardimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.blurimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.platform.LocalUriHandlerimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.Fontimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport cafe.adriel.voyager.androidx.AndroidScreenimport cafe.adriel.voyager.hilt.getViewModelimport com.bumptech.glide.integration.compose.ExperimentalGlideComposeApiimport com.bumptech.glide.integration.compose.GlideImageimport uz.gita.newsapp_practice.Rimport uz.gita.newsapp_practice.data.source.remote.response.category.CategorySourceimport uz.gita.newsapp_practice.domain.models.CategoryParamclass NewsScreen(private val data: CategoryParam) : AndroidScreen() {    @Composable    override fun Content() {        val viewModel: NewsContract.ViewModel = getViewModel<NewsViewModel>()        NewsScreenContent(            viewModel.uiState.collectAsState().value,            data,            viewModel::onEventDispatcher        )    }}@OptIn(ExperimentalGlideComposeApi::class)@Composablefun NewsScreenContent(    uiState: NewsContract.UIState = NewsContract.UIState(),    data: CategoryParam = CategoryParam("", "", "", "", CategorySource("", ""), "", "", ""),    onEventDispatcher: (NewsContract.Intent) -> Unit = {},) {    val sendIntent: Intent = Intent().apply {        action = Intent.ACTION_SEND        putExtra(Intent.EXTRA_TEXT, data.title + "\n" + data.content)        type = "text/plain"    }    val shareIntent = Intent.createChooser(sendIntent, null)    val context = LocalContext.current    val uriHandler = LocalUriHandler.current    Box(        modifier = Modifier            .fillMaxSize()            .background(Color.Black)    ) {        Image(            painter = painterResource(id = R.drawable.img_placeholder),            contentDescription = "",            modifier = Modifier                .fillMaxWidth()                .height(300.dp),            contentScale = ContentScale.Crop        )        GlideImage(            model = data.urlToImage,            contentDescription = "",            modifier = Modifier                .fillMaxWidth()                .height(300.dp),            contentScale = ContentScale.Crop        )        Box(            modifier = Modifier                .fillMaxWidth()                .fillMaxHeight()                .padding(top = 250.dp)                .align(Alignment.BottomCenter)                .clip(RoundedCornerShape(topStart = 20.dp, topEnd = 20.dp))                .background(Color.White)        ) {            Column {                Text(                    text = data.title!!,                    style = TextStyle(                        fontSize = 32.sp,                        color = Color(0xFF231F20),                        fontFamily = FontFamily(Font(R.font.inter_semi_bold)),                    ),                    modifier = Modifier.padding(top = 10.dp, start = 20.dp, end = 20.dp)                )                Text(                    text = data.description!!,                    style = TextStyle(                        color = Color(0xFF6D6265),                        fontSize = 16.sp,                        fontFamily = FontFamily(Font(R.font.inter_regular)),                    ),                    modifier = Modifier                        .padding(horizontal = 20.dp)                        .padding(top = 15.dp)                )                Text(                    text = data.author!!,                    style = TextStyle(                        color = Color(0xFF6D6265),                        fontSize = 16.sp,                        fontFamily = FontFamily(Font(R.font.inter_regular)),                    ),                    modifier = Modifier                        .padding(horizontal = 20.dp)                        .padding(top = 15.dp)                )                Text(                    text = data.publishedAt!!,                    style = TextStyle(                        color = Color(0xFF6D6265),                        fontSize = 16.sp,                        fontFamily = FontFamily(Font(R.font.inter_regular)),                    ),                    modifier = Modifier                        .padding(horizontal = 20.dp)                        .padding(top = 15.dp)                )                Text(                    text = data.content!!,                    style = TextStyle(                        color = Color(0xFF6D6265),                        fontSize = 16.sp,                        fontFamily = FontFamily(Font(R.font.inter_regular)),                    ),                    modifier = Modifier                        .padding(horizontal = 20.dp)                        .padding(top = 15.dp)                )            }            Card(                modifier = Modifier                    .fillMaxWidth()                    .align(Alignment.BottomCenter)                    .padding(top = 5.dp)                    .height(70.dp)                    .clip(RoundedCornerShape(topStart = 20.dp, topEnd = 20.dp))            ) {                Row(                    modifier = Modifier                        .fillMaxWidth()                        .blur(30.dp)                        .background(Color(0xFFB6B4B4))                ) {}                Row(                    modifier = Modifier                        .fillMaxWidth()                ) {                    Image(                        painter = painterResource(id = R.drawable.ic_arrow_back),                        contentDescription = null,                        modifier = Modifier                            .align(Alignment.CenterVertically)                            .padding(start = 30.dp)                            .clickable { onEventDispatcher.invoke(NewsContract.Intent.BackToMain) }                    )                    Spacer(modifier = Modifier.weight(1f))                    Text(                        text = "More:",                        modifier = Modifier                            .align(Alignment.CenterVertically)                            .padding(end = 30.dp),                        color = Color(0xFF231F20)                    )                    Image(                        painter = painterResource(id = R.drawable.ic_web),                        contentDescription = null,                        modifier = Modifier                            .align(Alignment.CenterVertically)                            .padding(end = 30.dp)                            .clickable { uriHandler.openUri(data.url!!) }                            .size(18.dp),                        contentScale = ContentScale.Crop                    )                    Image(                        painter = painterResource(id = R.drawable.ic_forward),                        contentDescription = null,                        modifier = Modifier                            .align(Alignment.CenterVertically)                            .padding(end = 30.dp)                            .clickable { context.startActivity(shareIntent) }                            .size(18.dp),                        contentScale = ContentScale.Crop                    )                }            }        }    }}@Composable@Preview(showBackground = true)fun NewsScreenPreview() {    NewsScreenContent()}