package uz.gita.newsapp_practice.domain.usecase.implimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.filterimport uz.gita.newsapp_practice.domain.models.SliderParamimport uz.gita.newsapp_practice.domain.repository.NewsRepositoryimport uz.gita.newsapp_practice.domain.usecase.SliderNewsUseCaseimport javax.inject.Injectclass SliderNewsUseCaseImpl @Inject constructor(    private val repository: NewsRepository,) : SliderNewsUseCase {    override fun invoke(): Flow<List<SliderParam>> =        repository.getSliderNews().filter { sliderList ->            sliderList.all { slider ->                slider.author != null && slider.content != null && slider.urlToImage != null &&                        slider.url != null && slider.description != null && slider.publishedAt != null &&                        slider.title != null            }        }}//        .filter { sliderList ->//        sliderList.all { slider ->//            slider.author != null && slider.content != null && slider.urlToImage != null &&//                    slider.url != null && slider.description != null && slider.publishedAt != null &&//                    slider.title != null//        }